#!/bin/bash -ex
# Copyright 2014-2016 The 'mumble-releng' Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that
# can be found in the LICENSE file in the source tree or at
# <http://mumble.info/mumble-releng/LICENSE>.

# __urlpath gets the path component of a URL.
# It is used to determine which filename to use
# when downloading the file.
#
# This function allows URLs to use a special suffix,
# "#fn=real-1.0.tar.gz" to specify the filename a
# a file should use on disk.
#
# This is useful for download services where the real
# filename is not part of the URL itself, such as
# GitHub's URLS for its auto-generated tarballs or
# zip files.
function __urlpath {
	realfn=$(basename "${1}" | sed "s,.*#fn=,,")
	if [ "${realfn}" == "" ]; then
		echo $(basename "${1}")
	else
		echo "${realfn}"
	fi
}

function vet {
	# Check that the paths of all URLs are the same.
	# This check is here to ensure we don't forget to
	# update all the URLs when updating the version
	# of a package.
	if [ ${#urls[@]} -gt 0 ]; then
		fn=$(__urlpath ${urls[0]})
		for url in "${urls[@]}"; do
			urlfn=$(__urlpath ${url})
			if [ "${urlfn}" != "${fn}" ]; then
				echo "Basename of URL '${url}' does not match the expected basename of '${fn}' (from ${urls[0]})"
				exit 1
			fi
		done
	fi
}

function fetch {
	# If no URLs are specified in the build file,
	# we can't fetch anything.
	if [ ${#urls[@]} -eq 0 ]; then
		echo "No URLs are specified in the '.build' file. Please add URLs to it, or override the fetch function."
		exit 1
	fi

	fn=$(__urlpath ${urls[0]})

	if [ ! -s "${fn}" ] && [ -f "${fn}" ]; then
		rm "${fn}"
	fi

	if [ ! -f "${fn}" ]; then
		set +e
		for url in "${urls[@]}"; do
			curl -f -L -o "${fn}" "${url}"
			if [ $? -eq 0 ]; then
				break
			else
				rm -f "${fn}"
			fi
		done
		set -e

		if [ ! -f "${fn}" ]; then
			echo "Unable to fetch file '${fn}'..."
			exit 1
		fi
	fi

	if [ ! -s "${fn}" ]; then
		echo "Found empty file '${fn}'..."
		exit 1
	fi
}

function verify {
	# Our default verify function only works
	# if the '.build' file specifies URLs.
	if [ ${#urls[@]} -eq 0 ]; then
		return
	fi

	# Determine which command to use for
	# getting SHA1 and SHA256 digests.
	if [ "$(which sha1sum)" != "" ]; then
		SHA1_CMD="sha1sum"
	elif [ "$(which shasum)" != "" ]; then
		SHA1_CMD="shasum -a 1"
	fi
	if [ "$(which sha256sum)" != "" ]; then
		SHA256_CMD="sha256sum"
	elif [ "$(which shasum)" != "" ]; then
		SHA256_CMD="shasum -a 256"
	fi

	fn=$(basename ${urls[0]})
	for digest in "${digests[@]}"; do
		if [ ${digest:0:5} == "sha1:" ]; then
			if [ "sha1:$(${SHA1_CMD} ${fn} | cut -b -40)" != "${digest}" ]; then
				echo "${fn} sha1 mismatch"
				exit 1
			fi
		fi
		if [ ${digest:0:7} == "sha256:" ]; then
			if [ "sha256:$(${SHA256_CMD} ${fn} | cut -b -64)" != "${digest}" ]; then
				echo "${fn} sha256 mismatch"
				exit 1
			fi
		fi
	done
}

function extract {
	echo "The function 'extract' was not overwritten in the build script."
	echo "Aborting..."
	exit 1
}

function prepare {
	:
}

function build {
	echo "The function 'build' was not overwritten in the build script."
	echo "Aborting..."
	exit 1
}

function testsuite {
	:
}

function install {
	echo "The function 'install' was not overwritten in the build script."
	echo "Aborting..."
	exit 1
}

if [ "${MUMBLE_PREFIX}" == "" ]; then
	echo "\$MUMBLE_PREFIX is not set."
	exit 1
fi

if [ "${MUMBLE_PREFIX_BUILD}" == "" ]; then
	echo "\$MUMBLE_PREFIX_BUILD is not set."
	exit 1
fi

. ${1}

if [ "${VSVER}" != "" ]; then
	# Convert the $VSVER variable into something
	# bash's comparison operators can work with.
	VSMAJOR=$(echo $VSVER | sed 's,\.0,,')

	# If we're on MSVS2012 or greater, set us
	# up to use /arch:IA32 to force pure IA32
	# binaries (no SSE/SSE2/AVX) to be
	# generated during our build.
	if [[ ${VSMAJOR} -gt 11 && "${ARCH}" == "x86" ]]; then
		export CL="/arch:IA32 ${CL}"
	fi
fi

# Set the buildenv root and switch to it.
MUMBLE_BUILDENV_ROOT="${PWD}"
cd "${MUMBLE_PREFIX_BUILD}"

vet
fetch
verify
extract
prepare
build
testsuite
install
